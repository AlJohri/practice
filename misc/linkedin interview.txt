
class Node(object):
    def __init__(self, left, right, value):
        self.left = left
        self.right = right
        self.value = value

def max_depth(node):
    if node is None: return 0
    return max(max_depth(node.left), max_depth(node.right)) + 1

#  1
# /  \
# 2  3
#     \
#      4

# max_depth(1)
#    max_depth(3)
#        max_depth(4)

/**
 * Given a nested list of integers, returns the sum of all integers in the list weighted by their depth
 * For example, given the list {{1,1},2,{1,1}} the function should return 10 (four 1's at depth 2, one 2 at depth 1)
 * Given the list {1,{4,{6}}} the function should return 27 (one 1 at depth 1, one 4 at depth 2, and one 6 at depth 3)
 */
 

class NestedInteger(object):
    def __init__(self, value):
        self.value = value
    
    def isInteger(self):
        if type(self.value) != list:
            return True
        else:
            return False
    
    def getInteger(self):
        if self.isInteger():
            return self.value
        else:
            return None
    
    def getList(self):
        if not self.isInteger():
            return self.value
        else:
            return None

def depth_sum(list_of_nested_integers, depth=1):
    sum = 0
    for item in list_of_nested_integers:
        if not item.isInteger():
            sum += depth_sum(item.getList(), depth+1)
        else:
            sum += item.getInteger() * depth
    return sum

# {1, {}, 2}

# input: {1,{4,{6}}}, depth = 1
    1 * depth(1)
    input = {4,{6}}, depth = 2
        4 * depth(2)
        input = {6}, depth = 3

/**
 * Sample input:
 *
 *          1
 *         / \
 *        3   5
 *       /   / \
 *      2   4   7
 *     / \   \
 *    9   6   8
 
 *
 * Expected output:
 *    1
 *    3 5
 *    2 4 7
 *    9 6 8
 *    ==========
 */
 
from queue import Queue

class Node(object):
    def __init__(self, left, right, value):
        self.left = left
        self.right = right
        self.value = value

def print_tree(root):
    queue = Queue()
    levelQueue = Queue()

    level = 0
    queue.enqueue(root)
    levelQueue.enqueue(level)
    
    while(queue):
        current = queue.dequeue()
        current_level = levelQueue.dequeue()
    
        print current.value + " " 
        if (root.left):
            queue.enqueue(root.left)
            levelQueue.enqueue(level + 1)
        if (root.right):
            queue.enqueue(root.right)
            levelQueue.enqueue(level + 1)
                  
         if levelQueue and current_level < levelQueue.peakLeft() and levelQueue.peakLeft() == levelQueue.peakRight():
             level += 1
             print ""

